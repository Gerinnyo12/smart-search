@page "/"
@using GriffSoft.SmartSearch.Frontend.Components.QuickGrid
@using GriffSoft.SmartSearch.Frontend.Providers
@using GriffSoft.SmartSearch.Logic.Dtos
@using GriffSoft.SmartSearch.Logic.Dtos.Enums
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Text.Json
@using SortDirection = Microsoft.AspNetCore.Components.QuickGrid.SortDirection

<PageTitle>Smart Search</PageTitle>

<div class="max-height-flex-column">
    <QuickGridSearchBar TotalCount="TotalCount"
                        @bind-Value="FilterMatchType"
                        @bind-Value:event="ValueChanged"
                        OnValueChanged="(filter) => UpdateFilterAsync(filter, FilterMatchType)">
    </QuickGridSearchBar>

    <div class="stretch grid ms-3" tabindex="-1">
        <QuickGrid Class="table table-dark" ItemsProvider="@ElasticDocumentsProvider" Virtualize="true" Theme="custom" @ref=Grid>
            <PropertyColumn Property="@(d => d.Value)" Title="Érték"/>

            <TemplateColumn Title="Kulcsok">
                @ListKeys(context.Keys)
            </TemplateColumn>

            <PropertyColumn Property="@(d => d.Type)" Sortable=true>
                <HeaderTemplate>
                    <QuickGridHeaderColumn Title="Típus"
                                           SortDirection="GetColumnSortDirection(nameof(ElasticDocument.Type))"
                                           OnSortClicked="() => UpdateSortAsync(context, nameof(ElasticDocument.Type))"
                                           OnFilterClicked="() => Grid!.ShowColumnOptionsAsync(context)">
                    </QuickGridHeaderColumn>
                </HeaderTemplate>
                <ColumnOptions>
                    <QuickGridCheckBoxFilter CheckBoxName="Első típus"
                                             @bind-Value="IsFirst"
                                             @bind-Value:event="ValueChanged"
                                             OnValueChanged="() => UpdateOrAsync(nameof(ElasticDocument.Type), nameof(TableType.First), IsFirst)">
                    </QuickGridCheckBoxFilter>
                    <QuickGridCheckBoxFilter CheckBoxName="Második típus"
                                             @bind-Value="IsSecond"
                                             @bind-Value:event="ValueChanged"
                                             OnValueChanged="() => UpdateOrAsync(nameof(ElasticDocument.Type), nameof(TableType.Second), IsSecond)">
                    </QuickGridCheckBoxFilter>
                    <QuickGridCheckBoxFilter CheckBoxName="Harmadik típus"
                                             @bind-Value="IsThird"
                                             @bind-Value:event="ValueChanged"
                                             OnValueChanged="() => UpdateOrAsync(nameof(ElasticDocument.Type), nameof(TableType.Third), IsThird)">
                    </QuickGridCheckBoxFilter>
                </ColumnOptions>
            </PropertyColumn>

            <PropertyColumn Property="@(d => d.Server)" Sortable="true" IsDefaultSortColumn=true>
                <HeaderTemplate>
                    <QuickGridHeaderColumn Title="Szerver"
                                           SortDirection="GetColumnSortDirection(nameof(ElasticDocument.Server))"
                                           OnSortClicked="() => UpdateSortAsync(context, nameof(ElasticDocument.Server))"
                                           OnFilterClicked="() => Grid!.ShowColumnOptionsAsync(context)">
                    </QuickGridHeaderColumn>
                </HeaderTemplate>
                <ColumnOptions>
                    <QuickGridTextFilter LabelName="Szerver"
                                         @bind-Value="Server"
                                         @bind-Value:event="ValueChanged"
                                         OnValueChanged="() => UpdateAndAsync(nameof(ElasticDocument.Server), Server)">
                    </QuickGridTextFilter>
                </ColumnOptions>
            </PropertyColumn>

            <PropertyColumn Property="@(d => d.Database)" Sortable="true">
                <HeaderTemplate>
                    <QuickGridHeaderColumn Title="Adatbázis"
                                           SortDirection="GetColumnSortDirection(nameof(ElasticDocument.Database))"
                                           OnSortClicked="() => UpdateSortAsync(context, nameof(ElasticDocument.Database))"
                                           OnFilterClicked="() => Grid!.ShowColumnOptionsAsync(context)">
                    </QuickGridHeaderColumn>
                </HeaderTemplate>
                <ColumnOptions>
                    <QuickGridTextFilter LabelName="Adatbázis"
                                         @bind-Value="Database"
                                         @bind-Value:event="ValueChanged"
                                         OnValueChanged="() => UpdateAndAsync(nameof(ElasticDocument.Database), Database)">
                    </QuickGridTextFilter>
                </ColumnOptions>
            </PropertyColumn>

            <PropertyColumn Property="@(d => d.Table)" Sortable="true">
                <HeaderTemplate>
                    <QuickGridHeaderColumn Title="Tábla"
                                           SortDirection="GetColumnSortDirection(nameof(ElasticDocument.Table))"
                                           OnSortClicked="() => UpdateSortAsync(context, nameof(ElasticDocument.Table))"
                                           OnFilterClicked="() => Grid!.ShowColumnOptionsAsync(context)">
                    </QuickGridHeaderColumn>
                </HeaderTemplate>
                <ColumnOptions>
                    <QuickGridTextFilter LabelName="Tábla"
                                         @bind-Value="Table"
                                         @bind-Value:event="ValueChanged"
                                         OnValueChanged="() => UpdateAndAsync(nameof(ElasticDocument.Table), Table)">
                    </QuickGridTextFilter>
                </ColumnOptions>
            </PropertyColumn>


            <PropertyColumn Property="@(d => d.Column)" Sortable="true">
                <HeaderTemplate>
                    <QuickGridHeaderColumn Title="Oszlop"
                                           SortDirection="GetColumnSortDirection(nameof(ElasticDocument.Column))"
                                           OnSortClicked="() => UpdateSortAsync(context, nameof(ElasticDocument.Column))"
                                           OnFilterClicked="() => Grid!.ShowColumnOptionsAsync(context)">
                    </QuickGridHeaderColumn>
                </HeaderTemplate>
                <ColumnOptions>
                    <QuickGridTextFilter LabelName="Oszlop"
                                         @bind-Value="Column"
                                         @bind-Value:event="ValueChanged"
                                         OnValueChanged="() => UpdateAndAsync(nameof(ElasticDocument.Column), Column)">
                    </QuickGridTextFilter>
                </ColumnOptions>
            </PropertyColumn>
        </QuickGrid>
    </div>
</div>

@code {
    public FilterMatchType FilterMatchType = FilterMatchType.BoolPrefix;

    public string Filter { get; set; } = string.Empty;

    public string Server { get; set; } = string.Empty;

    public string Database { get; set; } = string.Empty;

    public string Table { get; set; } = string.Empty;

    public string Column { get; set; } = string.Empty;

    public bool IsFirst { get; set; } = false;

    public bool IsSecond { get; set; } = false;

    public bool IsThird { get; set; } = false;

    public (string ColumnName, SortDirection SortDirection) CurrentSort { get; set; } = (nameof(ElasticDocument.Server), SortDirection.Ascending);

    private static string ListKeys(Dictionary<string, object> keys)
    {
        var keyList = new List<string>();

        foreach (var key in keys)
        {
            keyList.Add(key.Key + ": " + key.Value);
        }

        return string.Join(", ", keyList);
    }

    private SortDirection? GetColumnSortDirection(string columnName)
    {
        if (CurrentSort.ColumnName != columnName)
        {
            return default;
        }

        return CurrentSort.SortDirection;
    }

    private async Task UpdateSortAsync(ColumnBase<ElasticDocument> context, string sortColumn)
    {
        var inverseSortDirection = InvertSortDirection(CurrentSort.SortDirection);
        CurrentSort = (sortColumn, inverseSortDirection);
        await Grid!.SortByColumnAsync(context, inverseSortDirection);
    }

    private SortDirection InvertSortDirection(SortDirection sortDirection)
    {
        if (sortDirection == SortDirection.Ascending)
        {
            return SortDirection.Descending;
        }

        return SortDirection.Ascending;
    }
}
