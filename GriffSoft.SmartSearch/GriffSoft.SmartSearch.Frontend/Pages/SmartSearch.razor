@page "/"
@using GriffSoft.SmartSearch.Frontend.Providers
@using GriffSoft.SmartSearch.Logic.Dtos
@using GriffSoft.SmartSearch.Logic.Dtos.Enums
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Text.Json

<PageTitle>Smart Search</PageTitle>

<div class="search-box mb-3">
    <input type="search" autofocus @bind="Filter" @oninput='(e) => UpdateFilterAsync(GetStringValue(e))' placeholder="Puszedli" />
</div>

<div class="grid mb-3" tabindex="-1">
    <QuickGrid ItemsProvider="@ElasticDocumentsProvider" Virtualize="true" @ref=Grid>
        <PropertyColumn Property="@(d => d.Value)" />
        <PropertyColumn Property="@(d => d.Type)" Sortable=true>
            <ColumnOptions>
                <label>
                    @TableType.First.ToString()
                    <input type="checkbox" @bind="IsFirst" @oninput="(e) => UpdateOrAsync(nameof(Type), TableType.First.ToString(), (bool)e.Value!)" />
                </label>
                <label>
                    @TableType.Second.ToString()
                    <input type="checkbox" @bind="IsSecond" @oninput="(e) => UpdateOrAsync(nameof(Type), TableType.Second.ToString(), (bool)e.Value!)" />
                </label>
                <label>
                    @TableType.Third.ToString()
                    <input type="checkbox" @bind="IsThird" @oninput="(e) => UpdateOrAsync(nameof(Type), TableType.Third.ToString(), (bool)e.Value!)" />
                </label>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(d => d.Database)" Sortable=true IsDefaultSortColumn=true
                        InitialSortDirection="Microsoft.AspNetCore.Components.QuickGrid.SortDirection.Ascending">
            <ColumnOptions>
                <label>
                    Database Filter
                    <input type="text" autofocus @bind="Database"
                           @oninput='(e) => UpdateAndAsync(nameof(Database), GetStringValue(e))'
                           placeholder="Database name..." />
                </label>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(d => d.Table)" Sortable=true>
            <ColumnOptions>
                <label>
                    Table Filter
                    <input type="text" autofocus @bind="Table"
                           @oninput='(e) => UpdateAndAsync(nameof(Table), GetStringValue(e))'
                           placeholder="Table name..." />
                </label>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(d => d.Column)" Sortable=true>
            <ColumnOptions>
                <label>
                    Column Filter
                    <input type="text" autofocus @bind="Column"
                           @oninput='(e) => UpdateAndAsync(nameof(Column), GetStringValue(e))'
                           placeholder="Column name..." />
                </label>
            </ColumnOptions>
        </PropertyColumn>
        <TemplateColumn Title="@nameof(ElasticDocument.Keys)">
            @JsonSerializer.Serialize(context.Keys)
        </TemplateColumn>
    </QuickGrid>
</div>

<p>
    @if (TotalCount == 10_000)
    {
        <span>At least </span>
    }
    <strong>@TotalCount results found</strong>
</p>

@code {
    public string Filter { get; set; } = string.Empty;

    public string Database { get; set; } = string.Empty;

    public string Table { get; set; } = string.Empty;

    public string Column { get; set; } = string.Empty;

    public bool IsFirst { get; set; } = false;

    public bool IsSecond { get; set; } = false;

    public bool IsThird { get; set; } = false;

    private string GetStringValue(ChangeEventArgs changeEventArgs) => changeEventArgs.Value?.ToString() ?? string.Empty;
}
